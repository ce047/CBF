# -*- mode: python -*-

"""
    This file is part of CBF.

    CBF is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 2 of the License, or
    (at your option) any later version.

    CBF is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with CBF.  If not, see <http://www.gnu.org/licenses/>.


    Copyright 2009, 2010 Florian Paul Schmidt
"""

VERSION='0.1'
APPNAME='libcbf'
srcdir = '.'
blddir = "build"

def set_options(opt):
	pass

def configure(conf):
	pass

def build(bld): 
	sources = """
		control_basis.cc
		controller.cc 
		composite_reference.cc
		masking_resource.cc
		controller_sequence.cc
		identity_transform.cc 
		primitive_controller.cc 
		composite_primitive_controller.cc 
		resource.cc 
		dummy_resource.cc 
		sensor_transform.cc 
		effector_transform.cc 
		potential.cc 
		utilities.cc
		combination_strategy.cc
		composite_transform.cc
		axis_angle_potential.cc
		axis_potential.cc
		composite_potential.cc
		square_potential.cc
		linear_transform.cc 
		transform_chains.cc
		composite_resource.cc
		reference.cc
		dummy_reference.cc
		gnuplot_i.cpp
		quaternion.cc
		difference_sensor_transform.cc
		weighted_sum_transforms.cc
	"""
	
	task = bld.new_task_gen()
	task.features     = 'cxx cshlib'
	task.source       = sources
	task.target       = 'cbf'
	task.includes     = ['.', bld.bdir + '/default/schemas/']
	task.uselib       = ' BOOST_SHARED_PTR'
	task.uselib_local = ''

	if bld.env['CBF_HAVE_SPACEMOUSE'] == 1:
		task.source += ' spacenavi_reference.cc'
		task.uselib += ' SPACEMOUSE'

	if bld.env['CBF_HAVE_XCF'] == 1:
		task.source += ' xcf_resource.cc'
		task.uselib += ' XCF'

	if bld.env['CBF_HAVE_ROBOTINTERFACE'] == 1 and bld.env['CBF_HAVE_MEMORY'] == 1:
		task.source += ' robotinterface_resource.cc'
		task.uselib += ' ROBOTINTERFACE'

	if bld.env['CBF_HAVE_MEMORY'] == 1 and bld.env['CBF_HAVE_XMLTIO'] == 1:
		task.source += ' memory_resource.cc'
		task.uselib += ' MEMORY XMLTIO'

	if bld.env['CBF_HAVE_PLUGIN_SUPPORT'] == 1:
		task.source += ' plugin_pool.cc'
	
	if bld.env['CBF_HAVE_XSD'] == 1:
		task.uselib_local += ' schemalib'
		task.source += ' c_api.cc'

	if bld.env['CBF_HAVE_BOOST_PYTHON'] == 1:
		task.source += ' python_wrap.cc'
		task.features += ' pyembed'
		task.uselib  += ' PYEMBED BOOST_PYTHON'

		task2 = bld.new_task_gen()
		task2.features = 'cxx cshlib pyext pyembed'
		task2.target = 'pycbf'
		task2.source = 'python_bindings.cc'
		task2.uselib = 'PYEMBED PYEXT BOOST_PYTHON'
		task2.uselib_local = 'cbf'
		task2.includes = ['.', '../libcbf', '../libcbf/cbf/']

	if bld.env['CBF_HAVE_KDL'] == 1:
		task.source += ' kdl_transforms.cc'
		task.uselib += ' OROCOS-KDL'

	if bld.env['CBF_HAVE_EIGEN2'] == 1:
		task.source += ' generic_transform.cc'
		task.uselib += ' EIGEN2'

	if bld.env['CBF_HAVE_PA10']:
		task.source += ' pa10_joint_resource.cc'
		task.uselib += ' PA10'
	
